package Login;

import com.jayway.jsonpath.JsonPath;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.apache.commons.io.FileUtils;
import org.testng.Assert;
import org.testng.annotations.Test;
import utils.FileNameConstants;

import java.io.File;
import java.io.IOException;

import static org.testng.AssertJUnit.assertEquals;

public class POST_ztaLogin {
    public static String csrf_token;
    public static String apitoken2;
    public static String oauthcookie2;
    public static String ztnaLoginLink="https://ztna1.qa.xcloudiq.com/oauth/login";
    public static String homeredirectionLink="https://ztna1.qa.xcloudiq.com/services/acct/entry/home";
    public static String ztaredirectionLink="https://dev.qa.xcloudiq.com/auth/api/v1/accounts/login/";

    @Test
    public void zta() {
        try {
            String Body = FileUtils.readFileToString(new File(FileNameConstants.body));

            Response response = RestAssured
                    .given()
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .formParam("username", "azfar.altaf@emumba.com")
                    .formParam("password", "Emumba@123")
                    .baseUri(ztnaLoginLink)
                    .when()
                    .post()
                    .then()
                    .assertThat()
                    .statusCode(302)
                    .extract()
                    .response();

            String oauthcookie = response.getCookie("oauth2AccessToken");
            String apitoken = response.getCookie("api_access_token");
            System.out.println("The oauth token generated in xiq login is :"+oauthcookie);
            System.out.println("The api access token generated in xiq login is :"+apitoken);

            Response res = RestAssured.given().header("cookie", "api_access_token=" + apitoken, ",oauth2AccessToken=" + oauthcookie)
                    .baseUri(homeredirectionLink)
                    .when()
                    .get()
                    .then()
                    .assertThat()
                    .statusCode(200)
                    .extract().response();

            System.out.println("The session ID is :"+res.getDetailedCookies());
             oauthcookie2 = response.getCookie("oauth2AccessToken");
             apitoken2 = response.getCookie("api_access_token");
            System.out.println("The oauth token generated in home redirection login is :"+oauthcookie2);
            System.out.println("The api access token generated in home redirection login is :"+apitoken2);

            Response res2 =
                    RestAssured
                            .given()
                            .header("Content-Type", "application/JSON")
                            .header("Cookie", "api_access_token=" + apitoken2+ "; oauth2AccessToken=" + oauthcookie2)
                            .header("x-oauthToken",oauthcookie2)
                            .baseUri(ztaredirectionLink)
                            .body(Body)
                            .when()
                            .post()
                            .then()
                            .assertThat()
                            .log().ifValidationFails()
                            .statusCode(200)
                            .extract()
                            .response();

            //Verifies if the success is true
            boolean success= JsonPath.read(res2.body().asString(),"$.success");
            Assert.assertTrue(success);

            //verify the description of response
            String description= JsonPath.read(res2.body().asString(),"$.description");
            assertEquals("Logged in successfully.",description);



           csrf_token= res2.getCookie("csrftoken");
            System.out.println("The CSRF token generated by this post request is "+csrf_token);




        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String getCsrf_token() {
        return csrf_token;
    }

    public String getApitoken2()
    {
        return apitoken2;
    }

    public String getOauthtoken2()
    {
        return oauthcookie2;
    }
}




